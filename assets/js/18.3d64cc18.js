(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{608:function(a,t,e){"use strict";e.r(t);var s=e(17),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"常见类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见类型"}},[a._v("#")]),a._v(" 常见类型")]),a._v(" "),e("h2",{attrs:{id:"原始类型-string、number、boolean、bigint、symbol"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原始类型-string、number、boolean、bigint、symbol"}},[a._v("#")]),a._v(" 原始类型：string、number、boolean、bigint、symbol")]),a._v(" "),e("h2",{attrs:{id:"数组-array"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组-array"}},[a._v("#")]),a._v(" 数组：Array")]),a._v(" "),e("h2",{attrs:{id:"any"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#any"}},[a._v("#")]),a._v(" any")]),a._v(" "),e("p",[a._v("当你不希望一个值导致类型检查错误的时候，就可以设置为 any")]),a._v(" "),e("h3",{attrs:{id:"noimplicitany"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#noimplicitany"}},[a._v("#")]),a._v(" noImplicitAny")]),a._v(" "),e("p",[a._v("如果你没有指定一个类型，TypeScript 也不能从上下文推断出它的类型，编译器就会默认设置为 any 类型。"),e("br"),a._v("\n阻止这种行为，使用"),e("a",{attrs:{href:"https://www.typescriptlang.org/tsconfig#noImplicitAny",target:"_blank",rel:"noopener noreferrer"}},[a._v("noImplicitAny"),e("OutboundLink")],1),a._v("编译选项，当被隐式推断为 any 时，TypeScript 就会报错。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("tsc --noImplicitAny 文件名\n")])])]),e("h2",{attrs:{id:"函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[a._v("#")]),a._v(" 函数")]),a._v(" "),e("h3",{attrs:{id:"参数类型注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参数类型注解"}},[a._v("#")]),a._v(" 参数类型注解")]),a._v(" "),e("p",[a._v("当你声明一个函数的时候，你可以在每个参数后面添加一个类型注解，声明函数可以接受什么类型的参数。参数类型注解跟在参数名字后面：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function add(a: number, b: number) {\n  return a + b\n}\n")])])]),e("p",[a._v("类型传入错误时会报错")]),a._v(" "),e("h3",{attrs:{id:"返回值类型注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#返回值类型注解"}},[a._v("#")]),a._v(" 返回值类型注解")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function add(a, b): number {\n  return a + b\n}\n")])])]),e("h2",{attrs:{id:"对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[a._v("#")]),a._v(" 对象")]),a._v(" "),e("h2",{attrs:{id:"联合类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联合类型"}},[a._v("#")]),a._v(" 联合类型")]),a._v(" "),e("p",[a._v("比如")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("number | string\n")])])]),e("h2",{attrs:{id:"类型别名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型别名"}},[a._v("#")]),a._v(" 类型别名")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type myType = {\n  x: number;\n  y: number;\n}\nfunction add(arg: myType) {\n  return a + b\n}\nadd({x: 1, y: 1})\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type ID = number | string\n")])])]),e("h2",{attrs:{id:"接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[a._v("#")]),a._v(" 接口")]),a._v(" "),e("p",[a._v("接口声明（interface declaration）是命名对象类型的另一种方式：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("interface myType {\n  x: number;\n  y: number;\n}\n")])])]),e("p",[a._v("接口和类型别名非常相似，大部分时候，你可以任意选择使用。接口的几乎所有特性都可以在 type 中使用，两者最关键的差别在于类型别名本身无法添加新的属性，而接口是可以扩展的。")]),a._v(" "),e("h3",{attrs:{id:"通过继承扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过继承扩展"}},[a._v("#")]),a._v(" 通过继承扩展")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("interface Animal {\n  name: string\n}\n\ninterface Bear extends Animal {\n  honey: boolean\n}\n")])])]),e("h3",{attrs:{id:"通过交集扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过交集扩展"}},[a._v("#")]),a._v(" 通过交集扩展")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("type Animal = {\n  name: string\n}\n\ntype Bear = Animal & { \n  honey: boolean \n}\n")])])]),e("h3",{attrs:{id:"对一个已经存在的接口添加新的字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对一个已经存在的接口添加新的字段"}},[a._v("#")]),a._v(" 对一个已经存在的接口添加新的字段")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("interface Window {\n  title: string\n}\n\ninterface Window {\n  ts: TypeScriptAPI\n}\n")])])]),e("h2",{attrs:{id:"类型断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[a._v("#")]),a._v(" 类型断言")]),a._v(" "),e("h3",{attrs:{id:"断言的两种方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#断言的两种方式"}},[a._v("#")]),a._v(" 断言的两种方式")]),a._v(" "),e("ul",[e("li",[a._v("as语法")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("interface Person{\n  name:string;\n  age: number\n}\n\nlet student = {} as Person\n")])])]),e("ul",[e("li",[a._v("<>语法")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("interface Person{\n  name:string;\n  age: number\n}\n\nlet student = <Person>{}\n")])])]),e("h3",{attrs:{id:"非空断言操作符-后缀"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#非空断言操作符-后缀"}},[a._v("#")]),a._v(" 非空断言操作符（后缀！）")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("function log(x?: number | null) {\n  // No error（没有！则会报错：Object is possibly 'null'）\n  console.log(x!.toFixed());\n}\n")])])]),e("h3",{attrs:{id:"小贴士"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小贴士"}},[a._v("#")]),a._v(" 小贴士")]),a._v(" "),e("ul",[e("li",[a._v("慎用类型断言，除非你真的有把握")]),a._v(" "),e("li",[a._v("类型断言是一个编译时语法，不涉及运行时")])]),a._v(" "),e("h2",{attrs:{id:"枚举"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[a._v("#")]),a._v(" 枚举")])])}),[],!1,null,null,null);t.default=r.exports}}]);